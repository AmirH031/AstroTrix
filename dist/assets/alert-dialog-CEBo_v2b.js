import{c as e}from"./createLucideIcon-BHDkDqnO.js";import{t as a,j as s,v as t,w as o,b as r,W as l,c as i,x as n,d,k as c,y as f,z as m,B as p,O as u,E as x}from"./ui-vendor-C5dm8rnt.js";import{r as y}from"./react-vendor-BiErcIuD.js";import{c as g,b as N}from"./index-DPNeYU5-.js";
/**
 * @license lucide-react v0.474.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const v=e("Trash2",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}],["line",{x1:"10",x2:"10",y1:"11",y2:"17",key:"1uufr5"}],["line",{x1:"14",x2:"14",y1:"11",y2:"17",key:"xtxkd"}]]);var j="AlertDialog",[h,A]=i(j,[a]),D=a(),w=e=>{const{__scopeAlertDialog:a,...o}=e,r=D(a);return s.jsx(t,{...r,...o,modal:!0})};w.displayName=j;y.forwardRef((e,a)=>{const{__scopeAlertDialog:t,...o}=e,r=D(t);return s.jsx(x,{...r,...o,ref:a})}).displayName="AlertDialogTrigger";var b=e=>{const{__scopeAlertDialog:a,...t}=e,r=D(a);return s.jsx(o,{...r,...t})};b.displayName="AlertDialogPortal";var R=y.forwardRef((e,a)=>{const{__scopeAlertDialog:t,...o}=e,r=D(t);return s.jsx(u,{...r,...o,ref:a})});R.displayName="AlertDialogOverlay";var _="AlertDialogContent",[k,O]=h(_),z=c("AlertDialogContent"),F=y.forwardRef((e,a)=>{const{__scopeAlertDialog:t,children:o,...i}=e,c=D(t),f=y.useRef(null),m=r(a,f),p=y.useRef(null);return s.jsx(l,{contentName:_,titleName:I,docsSlug:"alert-dialog",children:s.jsx(k,{scope:t,cancelRef:p,children:s.jsxs(n,{role:"alertdialog",...c,...i,ref:m,onOpenAutoFocus:d(i.onOpenAutoFocus,e=>{e.preventDefault(),p.current?.focus({preventScroll:!0})}),onPointerDownOutside:e=>e.preventDefault(),onInteractOutside:e=>e.preventDefault(),children:[s.jsx(z,{children:o}),s.jsx(H,{contentRef:f})]})})})});F.displayName=_;var I="AlertDialogTitle",T=y.forwardRef((e,a)=>{const{__scopeAlertDialog:t,...o}=e,r=D(t);return s.jsx(f,{...r,...o,ref:a})});T.displayName=I;var $="AlertDialogDescription",C=y.forwardRef((e,a)=>{const{__scopeAlertDialog:t,...o}=e,r=D(t);return s.jsx(m,{...r,...o,ref:a})});C.displayName=$;var E=y.forwardRef((e,a)=>{const{__scopeAlertDialog:t,...o}=e,r=D(t);return s.jsx(p,{...r,...o,ref:a})});E.displayName="AlertDialogAction";var M="AlertDialogCancel",B=y.forwardRef((e,a)=>{const{__scopeAlertDialog:t,...o}=e,{cancelRef:l}=O(M,t),i=D(t),n=r(a,l);return s.jsx(p,{...i,...o,ref:n})});B.displayName=M;var H=({contentRef:e})=>{const a=`\`${_}\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \`${_}\` by passing a \`${$}\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${_}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return y.useEffect(()=>{document.getElementById(e.current?.getAttribute("aria-describedby"))},[a,e]),null},P=R,S=F,V=E,q=B,L=T,W=C;const Y=w,G=b,J=y.forwardRef(({className:e,...a},t)=>s.jsx(P,{className:g("fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...a,ref:t}));J.displayName=P.displayName;const K=y.forwardRef(({className:e,...a},t)=>s.jsxs(G,{children:[s.jsx(J,{}),s.jsx(S,{ref:t,className:g("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...a})]}));K.displayName=S.displayName;const Q=({className:e,...a})=>s.jsx("div",{className:g("flex flex-col space-y-2 text-center sm:text-left",e),...a});Q.displayName="AlertDialogHeader";const U=({className:e,...a})=>s.jsx("div",{className:g("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...a});U.displayName="AlertDialogFooter";const X=y.forwardRef(({className:e,...a},t)=>s.jsx(L,{ref:t,className:g("text-lg font-semibold",e),...a}));X.displayName=L.displayName;const Z=y.forwardRef(({className:e,...a},t)=>s.jsx(W,{ref:t,className:g("text-sm text-muted-foreground",e),...a}));Z.displayName=W.displayName;const ee=y.forwardRef(({className:e,...a},t)=>s.jsx(V,{ref:t,className:g(N(),e),...a}));ee.displayName=V.displayName;const ae=y.forwardRef(({className:e,...a},t)=>s.jsx(q,{ref:t,className:g(N({variant:"outline"}),"mt-2 sm:mt-0",e),...a}));ae.displayName=q.displayName;export{Y as A,v as T,K as a,Q as b,X as c,Z as d,U as e,ae as f,ee as g};
